function [averageFitnessEachStep] = generateFitnessAgainstMutationStrength(mutationStrengthRange, ...
                                                 trialsPerStep, ...
                                                 generations, ...
                                                 populationSize, ...
                                                 projectionHeight, ...
                                                 projectionWidth, ...
                                                 initialMutationSparsity, ...
                                                 finalMutationSparsity, ...
                                                 decayFactor, ...
                                                 transmissionMatrix)


    colIndex = 1;
    fitness = zeros(trialsPerStep, length(mutationStrengthRange));
    for mutationStrength = mutationStrengthRange
        for trial = 1:trialsPerStep
           bestProjection = geneticAlgorithm(generations, ...
                                             populationSize, ...
                                             projectionHeight, ...
                                             projectionWidth, ...
                                             initialMutationSparsity, ...
                                             finalMutationSparsity, ...
                                             mutationStrength, ...
                                             decayFactor, ...
                                             transmissionMatrix);

           fitness(trial, colIndex) = bestProjection.cost;
        end
        colIndex = colIndex + 1;
    end
    averageFitnessEachStep = mean(fitness);
end