function [averageFitnessEachStep] = generateFitnessAgainstMutationSparsity(mutationSparsityRange, ...
                                                 trialsPerStep, ...
                                                 generations, ...
                                                 populationSize, ...
                                                 projectionHeight, ...
                                                 projectionWidth, ...
                                                 decayFactor, ...
                                                 transmissionMatrix)

% --- code use to generate plot for noise against varying population size
    colIndex = 1;
    fitness = zeros(trialsPerStep, length(mutationSparsityRange));
    for mutationSparsity = mutationSparsityRange
        for trial = 1:trialsPerStep
           bestProjection = geneticAlgorithm(generations, ...
                                             populationSize, ...
                                             projectionHeight, ...
                                             projectionWidth, ...
                                             mutationSparsity, ...
                                             mutationSparsity, ...
                                             decayFactor, ...
                                             transmissionMatrix);

           fitness(trial, colIndex) = bestProjection.cost;
        end
        colIndex = colIndex + 1;
    end
    averageFitnessEachStep = mean(fitness);
end